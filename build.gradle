buildscript {
    ext {
        grpcVersion = '1.31.1'
        springbootVersion = '2.3.3.RELEASE'
        protobufGradleVersion = '0.8.13'
        protocVersion = '3.13.0'
        lombokVersion = '1.18.2'
        junitVersion = '5.6.2'
        springcloudVersion = '2.2.4.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}")
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.13"
    }
}

plugins {
    id 'org.springframework.boot' version "${springbootVersion}"
    id 'idea'
    id 'java'
    id 'com.google.protobuf' version "${protobufGradleVersion}"
}

group = 'com'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
    compile.exclude group: 'org.apache.tomcat'
}

dependencies {
    implementation 'io.github.lognet:grpc-spring-boot-starter:3.5.7'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-parent', version: "${springbootVersion}", ext: 'pom'
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springbootVersion}"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

sourceSets {
    main {
        java {
            srcDir 'src/main/protoGen'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        ofSourceSet('main').each { task ->
            task.builtins {
                java{
                    outputSubDir = 'protoGen'
                }
            }
            task.plugins {
                grpc {
                    outputSubDir = 'protoGen'
                }
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/"
}

task cleanProtoGen{
    doFirst{
           delete("$projectDir/src/main/protoGen")
    }
}
clean.dependsOn cleanProtoGen

test {
    useJUnitPlatform()
}



